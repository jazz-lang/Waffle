#[repr(u8)]
pub enum Opcode {
    OPCODE_HALT = 128,
    OPCODE_NOP = 0,

    OPCODE_ADD,
    OPCODE_SUB,
    OPCODE_MUL,
    OPCODE_DIV,
    OPCODE_MOD,
    OPCODE_POS,
    OPCODE_NEG,
    OPCODE_SHL,
    OPCODE_SHR,

    OPCODE_LT,
    OPCODE_LE,
    OPCODE_GT,
    OPCODE_GE,
    OPCODE_EQ,
    OPCODE_NE,
    OPCODE_IN,

    OPCODE_BOR,  /* bitwise or  */
    OPCODE_BXOR, /* bitwise xor */
    OPCODE_BAND, /* bitwise and */
    OPCODE_BNOT, /* bitwise not */
    OPCODE_LNOT, /* logical not */

    OPCODE_POP,
    OPCODE_DUP,
    OPCODE_SWAP,
    OPCODE_LOAD,
    OPCODE_STORE,
    OPCODE_CONST,
    OPCODE_UNPACK,

    OPCODE_ADDITEM,
    OPCODE_GETITEM,
    OPCODE_SETITEM,
    OPCODE_DELITEM,

    OPCODE_ADDATTR,
    OPCODE_GETATTR,
    OPCODE_SETATTR,
    OPCODE_DELATTR,

    OPCODE_ADDSLICE,
    OPCODE_GETSLICE,
    OPCODE_SETSLICE,
    OPCODE_DELSLICE,

    OPCODE_ADDGETTER,
    OPCODE_GETGETTER,
    OPCODE_SETGETTER,
    OPCODE_DELGETTER,

    OPCODE_ADDSETTER,
    OPCODE_GETSETTER,
    OPCODE_SETSETTER,
    OPCODE_DELSETTER,

    OPCODE_JZ,
    OPCODE_JNZ,
    OPCODE_JMP,

    OPCODE_ARRAY,
    OPCODE_DICTIONARY,

    OPCODE_DEFINE,
    OPCODE_KARG,
    OPCODE_VARG,
    OPCODE_VKARG,
    OPCODE_CALL,
    OPCODE_TAILCALL,
    OPCODE_RETURN,

    OPCODE_SELF,
    OPCODE_SUPER,
    OPCODE_CLASS,
    OPCODE_MODULE,

    OPCODE_TRY,
    OPCODE_UNTRY,
    OPCODE_THROW,
    OPCODE_LOADEXC,
}

const_assert!(core::mem::size_of::<Opcode>() == 1);
