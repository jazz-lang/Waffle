func (c char) to_digit(radix uint) *uint {
	if (radix <= 36) == false {
		println("to_digit: radix is too high (maximum 36)")
		exit(1)
	}

	var ch = c

	var val uint = 0 as uint

	if radix < 10 {
		if ch == '0' || ch =='1' || ch == '2' || ch == '3' || ch == '4' || ch == '5'
		|| ch == '6' || ch == '7' || ch == '8' || ch == '9' {
			val = ch as uint - '0' as uint
		} else {
			return null as *uint
		}
	} else  {
		if ch == '0' || ch =='1' || ch == '2' || ch == '3' || ch == '4' || ch == '5'
		|| ch == '6' || ch == '7' || ch == '8' || ch == '9' {
			val = ch as uint - '0' as uint
		} else if ch >= 'a' && ch <= 'z' {
			val = ch as uint - 'a' as uint + 10 as uint
		} else if ch >= 'A' && ch <= 'Z' {
			val = ch as uint - 'A' as uint + 10 as uint
		} else {
			return null as *uint
		}
	}
	if val < radix {
		var ptr = calloc(1,sizeof(uint) as int) as *uint
		memcpy(ptr as *void,(&val) as *void,0)
		return ptr
	} else {
		return null as *uint
	}


}

func (ch char) is_digit(radix uint) bool {
	var result = null as *uint
	result = ch.to_digit(radix)
	if result == null as *uint {
		return false
	} else {
		return true
	}
}



func (ch char) is_whitespace() bool {
	var c = ch
	if c == ' ' {
		return true
	} else if c >= 9 as char && c <= 13 as char {
		return true
	} else {
		return false
	}

	return false
}