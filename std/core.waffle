struct string {
    value *char,
    len int
}

func string_new(data *char,len int) string {
    var buf = malloc(len) as *char
    
    strcpy(buf,data)
    return string {
        value: buf,
        len: len
    }
}


extern func strcpy(dst *char,src *char) *char
extern func printf(x *char,...) void
extern func memcpy(dst *void,src *void,cnt int) *void
extern func malloc(x int) *void

extern func strcmp(s1 *char,s2 *char) int

func (s *string) push(x char) {
    var new_buf = malloc(s.len + 2) as *char
    sprintf(new_buf,c"%s%c",s.value,x)
    new_buf[s.len + 2] = '\0' 
    s.value = new_buf
    s.len = s.len + 1
    return
}

func (s *string) push_str(x string) {
    var new_buf = malloc(s.len + x.len + 1) as *char
    sprintf(new_buf,c"%s%s",s.value,x.value)
    new_buf[s.len + x.len + 1] = '\0'
    s.value = new_buf
    s.len = s.len + x.len + 1
    return
}

func (s string) compare(s2 string) int {
    return strcmp(s.value,s2.value)
}

func (s string) neq(s2 string) bool {
    return !s.equals(s2)
}


func (s string) equals(s2 string) bool {
    return s.compare(s2) == 0
}

func (s string) cstr() *char {
    return s.value
}
extern func strlen(x *char) int
extern func sprintf(x *char,y *char,...) int
extern func calloc(x int,y int) *void
func (x int) str() string {
    var buf = calloc(1,40) as *char
    var fmt = "%i".cstr()
    sprintf(buf,fmt,x);
    return string_new(buf,strlen(buf));
}

func (x long) str() string {
    var buf = calloc(1,40) as *char
    sprintf(buf,c"%li",x)
    return string_new(buf,strlen(buf))
}

func (x usize) str() string {
    var buf = calloc(1,40) as *char
    sprintf(buf,c"%lu",x);
    return string_new(buf,strlen(buf))
}

func (x isize) str() string {
    var buf = calloc(1,40) as *char
    sprintf(buf,c"%li",x) // TODO: Determine platform pointer size
    return string_new(buf,strlen(buf))
}

func (x float32) str() string {
    var buf = calloc(1,40) as *char
    sprintf(buf,c"%f",x)
    return string_new(buf,strlen(buf))
}

func (x float64) str() string {
    var buf = calloc(1,60) as *char
    sprintf(buf,c"%lf",x)
    return string_new(buf,strlen(buf))
}

func (x char) str() string {
    var buf = calloc(1,1) as *char
    sprintf(buf,c"%c",x)
    return string_new(buf,strlen(buf))
}

func println(x string) {
    var cstr = x.cstr()
    printf(c"%s\n",cstr)
    return;
}

func print(x string) {
    var cstr = x.cstr()
    printf(c"%s",cstr)
    return;
}