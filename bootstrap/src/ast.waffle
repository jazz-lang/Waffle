struct Location {
	line int,
	column int,
	file *char
}


func new_location(name *char,line int,column int) Location {
	var loc Location 
	loc.line = line
	loc.column = column
	loc.file = name

	return loc
}

func (l *Location) to_string() *char {
	var size = 20 + 20
	if l.file != null as *char {
		size = size + strlen(l.file)
	}
	var buf = calloc(1,size) as *char
	var file *char
	if l.file != null as *char {
		file = l.file
	} else {
		file = c"<no-file>"
	}
	var line = l.line
	var col = l.column
	sprintf(buf,c"%s:%i:%i",file,line,col)
	return buf
}


const EXPR_INT: int = 0
const EXPR_FLOAT: int = 1
const EXPR_STR: int = 2
const EXPR_BINARY: int = 3
const EXPR_CSTR: int = 4
const EXPR_PAR: int = 5
const EXPR_MEMBER: int = 6
const EXPR_CALL: int = 7
const EXPR_STRUCT: int = 8
const EXPR_SUBSCRIPT: int = 9
const EXPR_ARRAY: int = 10
const EXPR_CHAR: int = 11
const EXPR_BOOL: int = 12
const EXPR_UNARY: int = 13
const EXPR_NULL: int = 14
const EXPR_DEREF: int = 15
const EXPR_ADDROF: int = 16
const EXPR_CONV: int = 17
const EXPR_NONE: int = 18
struct Expr {
	pos Location, // expression location: file.waffle:line:col
	ty *Type, // expression return type, set on typechecking
	kind int // expression kind,e.g EXPR_CHAR
}

struct ExprAddrOf {
	pos Location,
	ty *Type,
	kind int,
	val *Expr
}

struct ExprDeref {
	pos Location,
	ty *Type,
	kind int,
	val *Expr
}

struct ExprConv {
	pos Location,
	ty *Type,
	kind int,
	val *Expr,
	to *Type
}

struct ExprInt {
	pos Location,
	ty *Type,
	kind int,
	val ulong
}

struct ExrpFloat {
	pos Location,
	ty *Type,
	kind int,
	val float64
}

struct ExprPar {
	pos Location,
	ty *Type,
	kind int,
	val *Expr
}

struct ExprMember {
	pos Location,
	ty *Type,
	kind int,
	object *Expr,
	field *char
}
struct ExprCall {
	pos Location,
	ty *Type,
	kind int,
	name *char, 
	this *Expr, // Option<Expr>
	args **Expr,
	count int
}

struct ExprStruct {
	pos Location,
	ty *Type,
	kind int,
	name *char,
	field_names **char,
	field_values **Expr,
	count int
}

struct ExprSubscript {
	pos Location,
	ty *Type,
	kind int,
	value *Expr,
	index *Expr
}

struct ExprArray {
	pos Location,
	ty *Type,
	kind int,
	values **Expr,
	count int
} 

struct ExprCStr {
	pos Location,
	ty *Type,
	kind int,
	value *char,
	len int
}

struct ExprStr {
	pos Location,
	ty *Type,
	kind int,
	value *char,
	len int
}

struct ExprChar {
	pos Location,
	ty *Type,
	kind int,
	value char
}

struct ExprUnary {
	pos Location,
	ty *Type,
	kind int,
	value *Expr,
	op *char
}

struct ExprBool {
	pos Location,
	ty *Type,
	kind int,
	value bool
}



struct ExprBinary {
	pos Location,
	ty *Type,
	kind int,
	op *char,
	x *Expr,
	y *Expr
}


const TYPE_BASIC = 0
const TYPE_PTR = 1
const TYPE_OPTION = 2
const TYPE_ARRAY = 3
const TYPE_STRUCT = 4
const TYPE_FUNC = 5
const TYPE_VOID = 6
struct Type {
	kind int,
	pos Location
}

struct TypeBasic {
	kind int,
	pos Location,
	name *char
}

struct TypePtr {
	kind int,
	pos Location,
	subtype *Type
}

struct TypeOption {
	kind int,
	pos Location,
	subtype *Type
}

struct TypeArray {
	kind int,
	pos Location,
	subtype *Type,
	len int,
	has_size bool
}

struct StructField 
{
	pos Location,
	name *char,
	ty *Type
}

struct TypeStruct {
	kind int,
	pos Location,
	name *char,
	fields *StructField,
	count int
}

struct TypeFunc {
	kind int,
	pos Location,
	params **Type,
	count int,
	returns *Type
}